const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const User = require("../models/userRegister");
const { authenticateToken } = require("../middleware/authMiddleware");

const userRouter = express.Router();

userRouter.get("/", async (req, res) => {
    try {
        const users = await User.find();
        res.json(users);
    } catch (error) {
        res.status(500).json({ message: "‚ùå Server Error", error: error.message });
    }
});
// ‚úÖ Register
userRouter.post("/register", async (req, res) => {
    try {
        const { email, username, password, role } = req.body;

        const isMatch = await User.findOne({ $or: [{ email }, { username }] });
        if (isMatch) {
            return res.status(400).json({ message: "‚ùå Email or Username already exists" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({ email, username, password: hashedPassword, role });
        await newUser.save();

        res.status(201).json({ message: "‚úÖ Registration Successful" });
    } catch (error) {
        res.status(500).json({ message: "‚ùå Server Error", error: error.message });
    }
});

// ‚úÖ Login
userRouter.post("/login", async (req, res) => {
    try {
        const { username, password } = req.body;
        const user = await User.findOne({ username });
        if (!user) return res.status(400).json({ message: "‚ùå Invalid Username" });

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: "‚ùå Invalid Password" });

        const accessToken = jwt.sign(
            { userId: user._id, username: user.username, role: user.role },
            process.env.ACCESS_TOKEN_SECRET,
            { expiresIn: "7d" }
        );
    
        res.json({ 
          accessToken, 
          message: "‚úÖ Login Successful",
          Role: user.role,
          User: user.username,
        });
    } catch (error) {
        res.status(500).json({ message: "‚ùå Server Error", error: error.message });
    }
});
// ‚úÖ Logout
userRouter.post("/logout", (req, res) => {
    res.clearCookie("accessToken", {
        httpOnly: true,
        secure: true,
        sameSite: "Strict",
    });

    res.status(200).json({ message: "‚úÖ Logout Successful" });
});

// edit user

userRouter.route('/edit/:id').get(async (req, res, next) => {
    try {
        const data = await User.findById(req.params.id);
        res.json(data);
    } catch (error) {
        next(error);
    }
});

//update user
userRouter.route('/update/:id').put(async (req, res, next) => {
    try {
        const data = await User.findByIdAndUpdate(req.params.id, {
            $set: req.body
        }, { new: true }); // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        res.json(data);
        console.log('User successfully updated');
    } catch (error) {
        next(error);
    }
});

// chengpassword

userRouter.put("/change-password/:id", async (req, res, next) => {
    try {
        const { oldPassword, newPassword } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ oldPassword ‡πÅ‡∏•‡∏∞ newPassword ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!oldPassword || !newPassword) {
            return res.status(400).json({ message: "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" });
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å ID
        const user = await User.findById(req.params.id);
        if (!user) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isMatch = await bcrypt.compare(oldPassword, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        user.password = hashedPassword;
        await user.save();

        res.status(200).json({ message: "‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });

    } catch (error) {
        next(error);
    }
});

// ‚úÖ Delete User
userRouter.delete("/delete/:id", authenticateToken, async (req, res) => {
    try {
        console.log("üîπ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö:", req.user);

        const userId = req.params.id;
        if (!userId) {
            return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
        }

        const deletedUser = await User.findByIdAndDelete(userId);
        if (!deletedUser) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
        }

        res.status(200).json({ message: "‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
        res.status(500).json({ message: "‚ùå Server Error", error: error.message });
    }
});


module.exports = userRouter;
